pthreads (POSIX threads) reprezintă o bibliotecă standardizată pentru programarea concurentă în limbajul C, conform standardului POSIX (Portable Operating System Interface). Aceasta oferă un set de funcții pentru crearea și gestionarea thread-urilor (firelor de execuție), permițând dezvoltatorilor să scrie programe multi-threaded, care pot executa mai multe operațiuni simultan, îmbunătățind astfel performanța și eficiența.

Caracteristicile principale ale pthreads:
Crearea și terminarea thread-urilor:

pthread_create: creează un nou thread.
pthread_exit: termină execuția unui thread.
pthread_join: așteaptă terminarea unui thread specificat.
Sincronizare:

Mutex-uri (Mutual Exclusions): Utilizate pentru a preveni accesul simultan la o resursă partajată.
pthread_mutex_init: inițializează un mutex.
pthread_mutex_lock: blochează un mutex.
pthread_mutex_unlock: deblochează un mutex.
pthread_mutex_destroy: distruge un mutex.
Condition Variables: Utilizate pentru a permite thread-urilor să aștepte până când o anumită condiție devine adevărată.
pthread_cond_init: inițializează o variabilă condițională.
pthread_cond_wait: așteaptă o condiție.
pthread_cond_signal: trezește un thread care așteaptă.
pthread_cond_broadcast: trezește toate thread-urile care așteaptă.
pthread_cond_destroy: distruge o variabilă condițională.
Atributele thread-urilor:

pthread_attr_init: inițializează atributele unui thread.
pthread_attr_setdetachstate: setează starea de detașare a unui thread (detașat sau nu).
pthread_attr_destroy: distruge atributele unui thread.
Exemple de utilizare:
Crearea unui thread simplu:
c
Copy code
#include <pthread.h>
#include <stdio.h>

void *myThreadFunc(void *arg) {
    printf("Hello from the new thread!\n");
    return NULL;
}

int main() {
    pthread_t thread_id;
    pthread_create(&thread_id, NULL, myThreadFunc, NULL);
    pthread_join(thread_id, NULL);
    printf("Hello from the main thread!\n");
    return 0;
}
Utilizarea mutex-urilor pentru sincronizare:
c
Copy code
#include <pthread.h>
#include <stdio.h>

pthread_mutex_t lock;
int counter = 0;

void *incrementCounter(void *arg) {
    pthread_mutex_lock(&lock);
    counter++;
    printf("Counter value: %d\n", counter);
    pthread_mutex_unlock(&lock);
    return NULL;
}

int main() {
    pthread_t thread1, thread2;
    pthread_mutex_init(&lock, NULL);

    pthread_create(&thread1, NULL, incrementCounter, NULL);
    pthread_create(&thread2, NULL, incrementCounter, NULL);

    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    pthread_mutex_destroy(&lock);
    return 0;
}
Avantajele utilizării pthreads:
Performanță: Permite execuția simultană a mai multor operațiuni, utilizând mai eficient resursele CPU.
Portabilitate: Fiind parte a standardului POSIX, programele scrise cu pthreads sunt portabile pe toate sistemele care respectă acest standard.
Fine-grained control: Oferă control detaliat asupra comportamentului thread-urilor și a sincronizării acestora.
Dezavantaje:
Complexitate: Programarea concurentă este mai complexă decât cea secvențială și poate duce la bug-uri dificil de depistat, cum ar fi deadlocks sau race conditions.
Overhead: Crearea și sincronizarea thread-urilor adaugă un anumit overhead.
Pthreads sunt esențiale pentru scrierea aplicațiilor multi-threaded în C și sunt utilizate pe scară largă în dezvoltarea de software pentru a îmbunătăți performanța și eficiența.